# Workflow to automatically update the blocked hosts file from a remote source
name: Automated Update of Blocked Hosts File

# Define the events that trigger this workflow
on:
  # Schedule the workflow to run daily at midnight UTC
  schedule:
    - cron: "0 0 * * *" # Executes once every day at 00:00 UTC

  # Allow manual triggering of the workflow via the GitHub interface
  workflow_dispatch:

# Define the jobs in the workflow
jobs:
  # Job to check for updates and apply them to the hosts file
  update-blocked-hosts-file:
    # Job name displayed in the GitHub Actions interface
    name: Update Blocked Hosts File Automatically

    # Define the type of runner for this job (Ubuntu in this case)
    runs-on: ubuntu-latest

    # Environment variables to use in this job
    env:
      HOSTS_FILE_URL: https://raw.githubusercontent.com/complexorganizations/content-blocker/main/assets/hosts # URL of the blocked hosts file
      LOCAL_HOSTS_FILE_PATH: assets/hosts # Local path to the hosts file in the repository

    steps:
      # Step 1: Checkout the latest repository code so that we can modify the hosts file
      - name: Checkout Code
        uses: actions/checkout@v5 # Checkout the latest code from the repository to the runner

      # Step 2: Get the current hash of the locally stored hosts file in the repository
      - name: Get Current Hosts File Hash
        run: |
          # Calculate the SHA-3-512 hash of the current hosts file in the repository
          LOCAL_FILE_HASH=$(openssl dgst -sha3-512 "${{ env.LOCAL_HOSTS_FILE_PATH }}" | awk '{print $2}')
          # Store the hash of the local file in GitHub environment variables for later comparison
          echo "LOCAL_FILE_HASH=$LOCAL_FILE_HASH" >> $GITHUB_ENV

      # Step 3: Get the hash of the remote hosts file for comparison
      - name: Get Remote Hosts File Hash
        run: |
          # Fetch the updated hosts file from the remote URL and calculate its SHA-3-512 hash
          REMOTE_FILE_HASH=$(curl --silent "${{ env.HOSTS_FILE_URL }}" | openssl dgst -sha3-512 | awk '{print $2}')
          # Store the hash of the remote file in GitHub environment variables
          echo "REMOTE_FILE_HASH=$REMOTE_FILE_HASH" >> $GITHUB_ENV

      # Step 4: Compare the local and remote file hashes to determine if an update is needed
      - name: Check for Hosts File Update
        run: |
          # If the hashes differ, update the local hosts file with the remote version
          if [ "$LOCAL_FILE_HASH" != "$REMOTE_FILE_HASH" ]; then
            echo "Hosts file has changed. Updating the local file..."
            # Download the updated hosts file from the remote source and save it locally
            curl -o "${{ env.LOCAL_HOSTS_FILE_PATH }}" "${{ env.HOSTS_FILE_URL }}"
          else
            # If the hashes are the same, no update is needed
            echo "No update required. The hosts file is up to date."
            exit 0  # Exit the job early if no update is necessary
          fi

      # Step 5: Commit and push the updated hosts file to the repository
      - name: Commit and Push Changes
        run: |
          # Configure Git user details for the commit
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Check if there are any changes in the hosts file
          if git diff --exit-code --quiet -- "${{ env.LOCAL_HOSTS_FILE_PATH }}"; then
            echo "No changes detected. Skipping commit and push."
            exit 0  # Exit if there are no changes
          else
            # If there are changes, add, commit, and push the updated hosts file
            git add "${{ env.LOCAL_HOSTS_FILE_PATH }}"
            git commit -m "Update blocked hosts file: $(date)"  # Commit message with current timestamp
            git push  # Push the committed changes to the remote repository
          fi

name: Test the Least Version of nftables Rules # Define the name of the workflow

# Define the events that trigger this workflow
on:
  # Trigger the workflow on a schedule (every Sunday at midnight UTC)
  schedule:
    - cron: "0 0 * * 0" # This cron expression ensures the workflow runs every Sunday at midnight UTC

  # Trigger when a pull request is created or updated that modifies a .sh file in the 'test' folder
  pull_request:
    paths:
      - "assets/test/**/*.sh" # Only trigger on changes to .sh files inside the 'test' folder or its subfolders

  # Trigger when a push is made that modifies a .sh file in the 'test' folder
  push:
    paths:
      - "assets/test/**/*.sh" # Only trigger on changes to .sh files inside the 'test' folder or its subfolders

  # Allow the workflow to be triggered manually via the GitHub Actions UI
  workflow_dispatch:

jobs:
  nftables-test: # Define the job that will be executed
    runs-on: ubuntu-latest # The job will run on the latest available Ubuntu runner

    # Set environment variables that can be used throughout the job
    env:
      TEST_FOLDER_PATH: "test" # Set the path to the 'test' folder containing .sh files you want to run

    steps:
      # Step 1: Checkout the repository's code
      - name: Checkout code # This step checks out the code from the repository to the runner
        uses: actions/checkout@v4 # Uses the official GitHub action to checkout the code

      # Step 2: Find and execute all .sh files inside the 'test' folder
      - name: Run all .sh files in the "test" folder # This step will loop through all .sh files in the 'test' folder
        run: |
          # Find all .sh files in the specified folder and its subfolders
          shell_scripts=$(find "${GITHUB_WORKSPACE}/${TEST_FOLDER_PATH}" -type f -name "*.sh")
          # Check if the list of shell scripts is empty
          if [ -z "${shell_scripts}" ]; then
            echo "No shell scripts (.sh files) found in the '${TEST_FOLDER_PATH}' folder."
            exit 0 # Exit successfully as there are no scripts to execute
          fi
          # Loop through each shell script found
          for script_path in ${shell_scripts}; do
            echo "Running ${script_path}..." # Print the name of the script being executed
            chmod +x "${script_path}" # Ensure the script has executable permissions
            # Execute the script and check for errors
            if bash "${script_path}"; then
              echo "Successfully executed: ${script_path}" # Print success message
            else
              echo "Error: Failed to execute ${script_path}" >&2 # Print error message to stderr
              exit 1 # Exit with an error code if a script fails
            fi
          done
